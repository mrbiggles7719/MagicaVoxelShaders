// xs_begin
// arg : { var = 'zoom'	name = 'zoom'	value = '60' range = '1 1000' step = '1' precision = '0' }
// arg : { var = 'xoffset'	name = 'XOffset'	value = '0' range = '0 1000' step = '1' precision = '2' decimal='1' }
// arg : { var = 'yoffset'	name = 'YOffset'	value = '0' range = '0 1000' step = '1' precision = '2' decimal='1' }
// arg : { var = 'zoffset'	name = 'ZOffset'	value = '0' range = '0 1000' step = '1' precision = '2' decimal='1' }
// arg : { var = 'startcolor'	name = 'StartCOlor'	value = '1' range = '1 255' precision='1' step = '1' decimal='0' }
// arg : { var = 'endcolor'	name = 'EndColor' value = '255'  precision='1' range = '1 255' step = '1' decimal='0' }
// arg : { var = 'cutoff'	name = 'Cut-off' value = '0'  precision='1' range = '-254 254' step = '1' decimal='0' }
// arg : { var = 'waterthreshcolor'	name = 'WaterThresh' value = '128'  precision='1' range = '1 255' step = '1' decimal='0' }
// arg : { var = 'reliefheight'	name = 'ReliefHeight' value = '0'  precision='1' range = '0 254' step = '2' decimal='0' }
// arg : { var = 'removecolor'	name = 'RemoveColor' value = '-1'  precision='1' range = '-1 255' step = '1' decimal='0' }
// arg : { var = 'octaves'	name = 'Octaves' value = '3'  precision='1' range = '1 100' step = '1' decimal='0' }
// arg : { var = 'octaveMultiplier'	name = 'OctaveMultiple' value = '3'  precision='1' range = '0.1 100' step = '0.1' decimal='1' }
// arg : { var = 'amplitude'	name = 'Amplitude' value = '0.3'  precision='12' range = '0.1 10.0' step = '0.1' decimal='1' }
// arg : { var = 'ampmultiplier'	name = 'AmplitudeMultiplier' value = '0.5'  precision='12' range = '0.1 5.0' step = '0.1' decimal='1' }
// arg : { var = 'remapType'	name = 'RemapType' value = '0'  precision='1' range = '0 1' step = '1' decimal='0' }

// xs_end

// https://github.com/mrbiggles7719/MagicavoxelShader

vec3 mod289(vec3 x)
{
    return x - floor(x * (1.0 / 289.0)) * 289.0;
}

vec4 mod289(vec4 x) {
    return x - floor(x * (1.0 / 289.0)) * 289.0;
}

vec4 permute(vec4 x)
{
    return mod289((x * 34.0 + 1.0) * x);
}

vec4 taylorInvSqrt(vec4 r)
{
    return 1.79284291400159 - 0.85373472095314 * r;
}

vec3 getavg(vec3 v) {
    float sV = sin(v.x);
    return vec3(0);
}


// https://gist.github.com/patriciogonzalezvivo/670c22f3966e662d2f83
//	Classic Perlin 3D Noise 
//	by Stefan Gustavson
//
//vec4 permute(vec4 x){return mod(((x*34.0)+1.0)*x, 289.0);}
//vec4 taylorInvSqrt(vec4 r){return 1.79284291400159 - 0.85373472095314 * r;}
vec4 fade(vec4 t) {return t*t*t*(t*(t*6.0-15.0)+10.0);}

float snoise(vec3 v){
  const vec2  C = vec2(1.0/6.0, 1.0/3.0) ;
  const vec4  D = vec4(0.0, 0.5, 1.0, 2.0);

// First corner
  vec3 i  = floor(v + dot(v, C.yyy) );
  vec3 x0 =   v - i + dot(i, C.xxx) ;

// Other corners
  vec3 g = step(x0.yzx, x0.xyz);
  vec3 l = 1.0 - g;
  vec3 i1 = min( g.xyz, l.zxy );
  vec3 i2 = max( g.xyz, l.zxy );

  //   x0 = x0 - 0.0 + 0.0 * C.xxx;
  //   x1 = x0 - i1  + 1.0 * C.xxx;
  //   x2 = x0 - i2  + 2.0 * C.xxx;
  //   x3 = x0 - 1.0 + 3.0 * C.xxx;
  vec3 x1 = x0 - i1 + C.xxx;
  vec3 x2 = x0 - i2 + C.yyy; // 2.0*C.x = 1/3 = C.y
  vec3 x3 = x0 - D.yyy;      // -1.0+3.0*C.x = -0.5 = -D.y
  
// Permutations
  i = mod289(i);
  vec4 p = permute( permute( permute(
             i.z + vec4(0.0, i1.z, i2.z, 1.0 ))
           + i.y + vec4(0.0, i1.y, i2.y, 1.0 ))
           + i.x + vec4(0.0, i1.x, i2.x, 1.0 ));

// Gradients: 7x7 points over a square, mapped onto an octahedron.
// The ring size 17*17 = 289 is close to a multiple of 49 (49*6 = 294)
  float n_ = 0.142857142857; // 1.0/7.0
  vec3  ns = n_ * D.wyz - D.xzx;

  vec4 j = p - 49.0 * floor(p * ns.z * ns.z);  //  mod(p,7*7)

  vec4 x_ = floor(j * ns.z);
  vec4 y_ = floor(j - 7.0 * x_ );    // mod(j,N)

  vec4 x = x_ *ns.x + ns.yyyy;
  vec4 y = y_ *ns.x + ns.yyyy;
  vec4 h = 1.0 - abs(x) - abs(y);

  vec4 b0 = vec4( x.xy, y.xy );
  vec4 b1 = vec4( x.zw, y.zw );

  //vec4 s0 = vec4(lessThan(b0,0.0))*2.0 - 1.0;
  //vec4 s1 = vec4(lessThan(b1,0.0))*2.0 - 1.0;
  vec4 s0 = floor(b0)*2.0 + 1.0;
  vec4 s1 = floor(b1)*2.0 + 1.0;
  vec4 sh = -step(h, vec4(0.0));

  vec4 a0 = b0.xzyw + s0.xzyw*sh.xxyy ;
  vec4 a1 = b1.xzyw + s1.xzyw*sh.zzww ;

  vec3 p0 = vec3(a0.xy,h.x);
  vec3 p1 = vec3(a0.zw,h.y);
  vec3 p2 = vec3(a1.xy,h.z);
  vec3 p3 = vec3(a1.zw,h.w);

// Normalise gradients
  vec4 norm = taylorInvSqrt(vec4(dot(p0,p0), dot(p1,p1), dot(p2, p2), dot(p3,p3)));
  p0 *= norm.x;
  p1 *= norm.y;
  p2 *= norm.z;
  p3 *= norm.w;

// Mix final noise value
  vec4 m = max(0.6 - vec4(dot(x0,x0), dot(x1,x1), dot(x2,x2), dot(x3,x3)), 0.0);
  m = m * m;
  return 42.0 * dot( m*m, vec4( dot(p0,x0), dot(p1,x1),
                                dot(p2,x2), dot(p3,x3) ) );
  }


// Simplex Noise
vec3 snoise_grad(vec3 v)
{
    const vec2 C = vec2(1.0 / 6.0, 1.0 / 3.0);

    // First corner
    vec3 i  = floor(v + dot(v, C.yyy));
    vec3 x0 = v   - i + dot(i, C.xxx);

    // Other corners
    vec3 g = step(x0.yzx, x0.xyz);
    vec3 l = 1.0 - g;
    vec3 i1 = min(g.xyz, l.zxy);
    vec3 i2 = max(g.xyz, l.zxy);

    // x1 = x0 - i1  + 1.0 * C.xxx;
    // x2 = x0 - i2  + 2.0 * C.xxx;
    // x3 = x0 - 1.0 + 3.0 * C.xxx;
    vec3 x1 = x0 - i1 + C.xxx;
    vec3 x2 = x0 - i2 + C.yyy;
    vec3 x3 = x0 - 0.5;

    // Permutations
    i = mod289(i); // Avoid truncation effects in permutation
    vec4 p =
      permute(permute(permute(i.z + vec4(0.0, i1.z, i2.z, 1.0))
                            + i.y + vec4(0.0, i1.y, i2.y, 1.0))
                            + i.x + vec4(0.0, i1.x, i2.x, 1.0));

    // Gradients: 7x7 points over a square, mapped onto an octahedron.
    // The ring size 17*17 = 289 is close to a multiple of 49 (49*6 = 294)
    vec4 j = p - 49.0 * floor(p * (1.0 / 49.0));  // mod(p,7*7)

    vec4 x_ = floor(j * (1.0 / 7.0));
    vec4 y_ = floor(j - 7.0 * x_ );  // mod(j,N)

    vec4 x = x_ * (2.0 / 7.0) + 0.5 / 7.0 - 1.0;
    vec4 y = y_ * (2.0 / 7.0) + 0.5 / 7.0 - 1.0;

    vec4 h = 1.0 - abs(x) - abs(y);

    vec4 b0 = vec4(x.xy, y.xy);
    vec4 b1 = vec4(x.zw, y.zw);

    //vec4 s0 = vec4(lessThan(b0, 0.0)) * 2.0 - 1.0;
    //vec4 s1 = vec4(lessThan(b1, 0.0)) * 2.0 - 1.0;
    vec4 s0 = floor(b0) * 2.0 + 1.0;
    vec4 s1 = floor(b1) * 2.0 + 1.0;
    vec4 sh = -step(h, vec4(0.0));

    vec4 a0 = b0.xzyw + s0.xzyw * sh.xxyy;
    vec4 a1 = b1.xzyw + s1.xzyw * sh.zzww;

    // Normalise gradients
    vec3 g0 = vec3(a0.xy, h.x);
    vec3 g1 = vec3(a0.zw, h.y);
    vec3 g2 = vec3(a1.xy, h.z);
    vec3 g3 = vec3(a1.zw, h.w);

    // Normalise gradients
    vec4 norm = taylorInvSqrt(vec4(dot(g0, g0), dot(g1, g1), dot(g2, g2), dot(g3, g3)));
    g0 *= norm.x;
    g1 *= norm.y;
    g2 *= norm.z;
    g3 *= norm.w;

    // Compute gradient of noise function at P
    vec4 m = max(0.6 - vec4(dot(x0, x0), dot(x1, x1), dot(x2, x2), dot(x3, x3)), 0.0);
    vec4 m2 = m * m;
    vec4 m3 = m2 * m;
    vec4 m4 = m2 * m2;
    vec3 grad =
      -6.0 * m3.x * x0 * dot(x0, g0) + m4.x * g0 +
      -6.0 * m3.y * x1 * dot(x1, g1) + m4.y * g1 +
      -6.0 * m3.z * x2 * dot(x2, g2) + m4.z * g2 +
      -6.0 * m3.w * x3 * dot(x3, g3) + m4.w * g3;
    return 42.0 * grad;
}
//////////////////////////////// End noise code ////////////////////////////////





float mapNoise(vec3 v) {
    float t = 0.0;
    float am = amplitude;
    vec3 offset = vec3(xoffset,yoffset,zoffset);
    for(int i = 0; i < int(octaves); i++) {
        t += snoise_grad(v + offset).t * am;
        v = v * octaveMultiplier;
        am *= ampmultiplier;
    }
    if(remapType == 1.) {
        t = (t - -1.0);
    } else {
        t = abs(t);
    } 
  	float a = 0.0;
	float b = 1.0;
	float c = startcolor;
	float d = endcolor;
	float newT = (t-a)/(b-a) * (d-c) + c;

	return clamp(newT,c,d);
}


float map( vec3 v ) {
    const float PI = 3.1415926;
    vec3 center = iVolumeSize * 0.5;
    float radius = min( min( center.x, center.y ), center.z ) - reliefheight;
    float innerRadius = radius - reliefheight/2.;
    float outerRadius =  radius + reliefheight/2.;
    bool isWater = false;
    

    float distance = length( v + 0.5 - center );

    float idx = mapNoise(v/zoom);

    if(int(idx) == int(removecolor)) {
	    return 0.0;
    }



    if(idx < waterthreshcolor) {
        isWater = true;
    } else {
        isWater = false;
    }


    if(cutoff < 0.) {
        if(idx < cutoff*-1.0) {
            return -1.0;
        }
    }
    if(cutoff > 0.) {
            if(idx > cutoff) {
            return -1.0;
        }
    }

    if(distance < innerRadius ) { 
        return idx;
    }

    //  Everything just below our radius
    if((distance >= innerRadius) && (distance <= outerRadius) ) {
        if(idx <= waterthreshcolor) {
            return 0.0;
        } else {
            return idx;
        }
    }

    if(distance > outerRadius) {
        return -1.0;
    }	
}


