// xs_begin
// arg : { var = 'octaves'	name = 'Octaves' value = '3'  precision='1' range = '1 50' step = '1' decimal='0' }
// arg : { var = 'freq'	name = 'Freq'	value = '60' range = '-100000 1000000' step = '1' decimal = '1' }
// arg : { var = 'amplitude'	name = 'Amplitude' value = '0.5'  precision='0.1' range = '-1.0 1.0' step = '0.1' decimal='1' }
// arg : { var = 'gain'	name = 'Gain' value = '0.5'  precision='1' range = '-1.0 1.0' step = '0.1' decimal='1' }
// arg : { var = 'lacunarity'	name = 'Lacunarity' value = '0.01'  range = '-100.0 100.0' precision = '3'  step = '0.01' }
// arg : { var = 'seed'	name = 'Seed' value = '0'  precision='1' range = '0 1000000' step = '1' decimal='0' }
// arg : { var = 'useAbs'	name = 'absValMode' value = '0'  range = '0 2' decimal='1' step = '1'}
// arg : { var = 'xoffset'	name = 'XOffset'	value = '0' range = '-1000 1000' step = '5' precision = '2' decimal='1' }
// arg : { var = 'numCloudColors'	name = 'CloudColorNum' value = '0'  precision='1' range = '0 255' step = '1' decimal='0' }
// arg : { var = 'cloudFreq'	name = 'CloudFreq'	value = '30' range = '-100000 1000000' step = '1' decimal = '1' }
// arg : { var = 'cloudLacunarity'	name = 'CloudLacunarity' value = '0.1'  range = '-100.0 100.0' precision = '3'  step = '0.01' }
// arg : { var = 'cloudLayers'	name = 'CloudLayers' value = '0'  precision='1' range = '0 253' step = '1' decimal='0' }
// arg : { var = 'cut'	name = 'Cut' value = '3'  precision='1' range = '0 5' step = '1' decimal='0' }
// xs_end

// https://github.com/mrbiggles7719/MagicavoxelShader



vec3 mod289(vec3 x)
{
    return x - floor(x * (1.0 / 289.0)) * 289.0;
}

vec4 mod289(vec4 x) {
    return x - floor(x * (1.0 / 289.0)) * 289.0;
}

vec4 permute(vec4 x)
{
    vec4 s = vec4(seed);
    x += s;
    return mod289((x * 34.0 + 1.0) * x);
}

vec4 taylorInvSqrt(vec4 r)
{
    return 1.79284291400159 - 0.85373472095314 * r;
}

vec3 getavg(vec3 v) {
    float sV = sin(v.x);
    return vec3(0);
}







// https://github.com/hughsk/glsl-noise/blob/master/simplex/3d.glsl
float snoise(vec3 v){
  const vec2  C = vec2(1.0/6.0, 1.0/3.0) ;
  const vec4  D = vec4(0.0, 0.5, 1.0, 2.0);

// First corner
  vec3 i  = floor(v + dot(v, C.yyy) );
  vec3 x0 =   v - i + dot(i, C.xxx) ;

// Other corners
  vec3 g = step(x0.yzx, x0.xyz);
  vec3 l = 1.0 - g;
  vec3 i1 = min( g.xyz, l.zxy );
  vec3 i2 = max( g.xyz, l.zxy );

  //   x0 = x0 - 0.0 + 0.0 * C.xxx;
  //   x1 = x0 - i1  + 1.0 * C.xxx;
  //   x2 = x0 - i2  + 2.0 * C.xxx;
  //   x3 = x0 - 1.0 + 3.0 * C.xxx;
  vec3 x1 = x0 - i1 + C.xxx;
  vec3 x2 = x0 - i2 + C.yyy; // 2.0*C.x = 1/3 = C.y
  vec3 x3 = x0 - D.yyy;      // -1.0+3.0*C.x = -0.5 = -D.y
  
// Permutations
  i = mod289(i);
  vec4 p = permute( permute( permute(
             i.z + vec4(0.0, i1.z, i2.z, 1.0 ))
           + i.y + vec4(0.0, i1.y, i2.y, 1.0 ))
           + i.x + vec4(0.0, i1.x, i2.x, 1.0 ));

// Gradients: 7x7 points over a square, mapped onto an octahedron.
// The ring size 17*17 = 289 is close to a multiple of 49 (49*6 = 294)
  float n_ = 0.142857142857; // 1.0/7.0
  vec3  ns = n_ * D.wyz - D.xzx;

  vec4 j = p - 49.0 * floor(p * ns.z * ns.z);  //  mod(p,7*7)

  vec4 x_ = floor(j * ns.z);
  vec4 y_ = floor(j - 7.0 * x_ );    // mod(j,N)

  vec4 x = x_ *ns.x + ns.yyyy;
  vec4 y = y_ *ns.x + ns.yyyy;
  vec4 h = 1.0 - abs(x) - abs(y);

  vec4 b0 = vec4( x.xy, y.xy );
  vec4 b1 = vec4( x.zw, y.zw );

  //vec4 s0 = vec4(lessThan(b0,0.0))*2.0 - 1.0;
  //vec4 s1 = vec4(lessThan(b1,0.0))*2.0 - 1.0;
  vec4 s0 = floor(b0)*2.0 + 1.0;
  vec4 s1 = floor(b1)*2.0 + 1.0;
  vec4 sh = -step(h, vec4(0.0));

  vec4 a0 = b0.xzyw + s0.xzyw*sh.xxyy ;
  vec4 a1 = b1.xzyw + s1.xzyw*sh.zzww ;

  vec3 p0 = vec3(a0.xy,h.x);
  vec3 p1 = vec3(a0.zw,h.y);
  vec3 p2 = vec3(a1.xy,h.z);
  vec3 p3 = vec3(a1.zw,h.w);

//Normalise gradients
  vec4 norm = taylorInvSqrt(vec4(dot(p0,p0), dot(p1,p1), dot(p2, p2), dot(p3,p3)));
  p0 *= norm.x;
  p1 *= norm.y;
  p2 *= norm.z;
  p3 *= norm.w;

// Mix final noise value
  vec4 m = max(0.6 - vec4(dot(x0,x0), dot(x1,x1), dot(x2,x2), dot(x3,x3)), 0.0);
  m = m * m;
  return 42.0 * dot( m*m, vec4( dot(p0,x0), dot(p1,x1),
                                dot(p2,x2), dot(p3,x3) ) );
  }


float palparam(float p, float s, float e) {
	float f = ceil(mix(s, e, p));
	return color_sel(f);
}


float mapNoiseRange(vec3 v, float freq, float lacunarity, float amplitude) {
    float maxT = 0.;
    float yoffset = 0.;
    vec3 offset = vec3(xoffset,yoffset,0.0);
    float t = 0.0;
    v += offset;
	float _freq = 1.0 * (1.0/freq);
    float amp = amplitude;
	float _lacunarity = lacunarity/10.0;
    float maxAmp = 0.0;

    for(int i = 0; i < int(octaves); i++) {
		if(useAbs == 1.0) {
			t += abs(snoise(v*_freq)) * amp;
		} else {
			t += snoise(v*_freq) * amp;
		}
		_freq += _lacunarity;
        amp *= gain;
		maxAmp += amp;
    }
	if(useAbs == 2.0) {
		t = abs(t);
	} else {
		t = (t + 1) / 2.0;
	}
	return t;
}

float map( vec3 v ) {
    const float PI = 3.1415926;
    vec3 center = iVolumeSize * 0.5;
    float radius = min( min( center.x, center.y ), center.z );
    float innerRadius = radius - cloudLayers;
    float outerRadius =  radius;
	float distance = length( v + 0.5 - center );
    float cloudColorStart = i_num_color_sels -1.0 - numCloudColors;
	float cloudColorEnd = cloudColorStart + numCloudColors;
    float startcolor = 1.0;
    float endcolor = cloudColorStart;
    float cloudLayerNum = outerRadius - distance;
	float cloudNoise = mapNoiseRange(v,cloudFreq,cloudLacunarity, 0.5);
	float cloudidx = -1;
    float n = mapNoiseRange(v,freq,lacunarity,amplitude);
    float idx = palparam(n,-1.0,cloudColorStart);

    if(cloudColorStart == cloudColorEnd) {
		cloudidx = -1.;
	} else {
		cloudidx = palparam(cloudNoise,cloudColorStart+1.,cloudColorEnd);
	}

	if(cut == 1.) {
        if(distance > innerRadius && v.x + 0.5 > center.x) {
            return -1.;
        }       
    }
    if(cut == 2.) {
        if(v.z + 0.5 > center.z) {
            return -1.;
        }
    }
    if(cut == 3.) {
        if((v.x + 0.5 > center.x) && (v.y + 0.5 > center.y)) {
                return -1;
        }
        if( distance > innerRadius && v.z + 0.5 > center.z) {
            return -1.;
        }
    }

	if(distance >= outerRadius) {
		return -1;
	}
    if(distance > innerRadius && distance <= outerRadius) {
		return cloudidx;
    } else if(distance <= outerRadius) {
	   return idx;
	}



   
}


