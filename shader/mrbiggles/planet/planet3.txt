// xs_begin
// arg : { var = 'noiseType' name = 'NoiseType' value = '0'  precision='1' range = '0 2' step = '1' decimal='0' }
// arg : { var = 'octaveNoiseType' name = 'octaveNoiseType' value = '0'  precision='1' range = '0 2'  decimal='0' }
// arg : { var = 'octaves'	name = 'Octaves' value = '3'  precision='1' range = '1 50' step = '1' decimal='0' }
// arg : { var = 'jitter'	name = 'worleyJitter'	value = '0.5' range = '0.0 1.0' step = '0.1' precision = '1' }
// arg : { var = 'freq'	name = 'Zoom'	value = '60' range = '-1000 1000' step = '1' decimal = '1' }
// arg : { var = 'amplitude'	name = 'Amplitude' value = '1'  precision='0.1' range = '-2.0 2.0' step = '0.1' decimal='1' }
// arg : { var = 'gain'	name = 'Gain' value = '0.5'  precision='1' range = '-1.0 1.0' step = '0.1' decimal='1' }
// arg : { var = 'lacunarity'	name = 'Lacunarity' value = '0.01'  range = '-100.0 100.0' precision = '3'  step = '0.01' }
// arg : { var = 'xoffset'	name = 'XOffset'	value = '0' range = '-1000 1000' step = '5' precision = '2' decimal='1' }
// arg : { var = 'yoffset'	name = 'YOffset'	value = '0' range = '-1000 1000' step = '5' precision = '2' decimal='1' }
// arg : { var = 'startcolor'	name = 'StartColor'	value = '1' range = '1 255' precision='1' step = '1' decimal='0' }
// arg : { var = 'endcolor'	name = 'EndColor' value = '255'  precision='1' range = '1 255' step = '1' decimal='0' }
// arg : { var = 'cutoff'	name = 'Cut-off' value = '0'  precision='1' range = '-255 255' step = '1' decimal='0' }
// arg : { var = 'waterthreshcolor'	name = 'WaterThresh' value = '220'  precision='1' range = '0 255' step = '1' decimal='0' }
// arg : { var = 'reliefheight'	name = 'ReliefHeight' value = '0'  precision='1' range = '0 254' step = '1' decimal='0' }
// xs_end

// https://github.com/mrbiggles7719/MagicavoxelShader


float seed = iIter;


vec3 mod289(vec3 x)
{
    return x - floor(x * (1.0 / 289.0)) * 289.0;
}

vec4 mod289(vec4 x) {
    return x - floor(x * (1.0 / 289.0)) * 289.0;
}

vec4 permute(vec4 x)
{
    vec4 s = vec4(seed);
    x += s;
    return mod289((x * 34.0 + 1.0) * x);
}

vec4 taylorInvSqrt(vec4 r)
{
    return 1.79284291400159 - 0.85373472095314 * r;
}

vec3 getavg(vec3 v) {
    float sV = sin(v.x);
    return vec3(0);
}


// https://github.com/ValgoBoi/clover-noise/tree/master/src/glsl

float CLOVER_NOISE_3D_POINT_SPREAD = .2;
float CLOVER_NOISE_3D_PI = radians(180.);

float clover_noise_3d_hash(vec3 p) {
    return fract(1e4 * sin(17.0 * p.x + p.y * 0.1) * (0.1 + abs(sin(p.y * 13.0 + p.x - p.z)) * sin(12.0 * p.z - sin(p.x * 10.0))));
}

vec3 clover_noise_3d_offset(vec3 p, float hash) {
    float rotation = hash * CLOVER_NOISE_3D_PI * 2000.;
    float height = (fract((floor(hash * 1000.) + .5) / 100.) - .5) * CLOVER_NOISE_3D_PI / 2.;
    float layer = floor(hash * 10. + 1.) * .1;
    vec3 offset = vec3(sin(rotation) * cos(height), sin(height), cos(rotation) * cos(height)) * layer + .5;
   return p + offset * CLOVER_NOISE_3D_POINT_SPREAD * 2. + .5 - CLOVER_NOISE_3D_POINT_SPREAD;

}




bool clover_noise_3d_boundary(vec3 p, vec3 c_00, vec3 c_10, vec3 c_20, vec3 c_01, vec3 c_11, vec3 c_21, vec3 c_02, vec3 c_12, vec3 c_22) {
    vec2 d_p_c11 = p.yx - c_11.yx;
    vec2 m_p_c11 = d_p_c11 * c_11.xy;

    vec2 side_nx = m_p_c11 - d_p_c11 * c_01.xy;
    vec2 side_px = m_p_c11 - d_p_c11 * c_21.xy;

    vec3 a, b, c, d;

    if ((side_nx.y - side_nx.x < 0. && p.x < c_11.x) || (side_px.y - side_px.x > 0. && p.x >= c_11.x)) {
        vec2 side_py = m_p_c11 - d_p_c11 * c_12.xy;

        if (side_py.y - side_py.x > 0.) {
            a = c_01;
            b = c_02;
            c = c_12;
            d = c_11;
        } else {
            a = c_11;
            b = c_12;
            c = c_22;
            d = c_21;
        }
    } else {
        vec2 side_ny = m_p_c11 - d_p_c11 * c_10.xy;

        if (side_ny.y - side_ny.x > 0.) {
            a = c_10;
            b = c_11;
            c = c_21;
            d = c_20;
        } else {
            a = c_00;
            b = c_01;
            c = c_11;
            d = c_10;
        }
    }

    vec3 f = a;
    vec3 g = c;
    vec3 h = d;

    vec3 ac = a - c;
    vec3 pa = p - a;

    if (pa.x * ac.y - pa.y * ac.x > 0.) {
        h = b;
    }

    vec2 bc_v0 = g.xy - f.xy;
    vec2 bc_v1 = h.xy - f.xy;
    vec2 bc_v2 = p.xy - f.xy;
    float den = 1. / (bc_v0.x * bc_v1.y - bc_v1.x * bc_v0.y);
    float v = (bc_v2.x * bc_v1.y - bc_v1.x * bc_v2.y) * den;
    float w = (bc_v0.x * bc_v2.y - bc_v2.x * bc_v0.y) * den;
    float u = 1. - v - w;

    return p.z < u * f.z + v * g.z + w * h.z;
}




float clover_noise_3d(vec3 p) {
    vec3 p_floor = floor(p);

    vec3 c_111 = clover_noise_3d_offset(p_floor, clover_noise_3d_hash(p_floor));
    vec3 c_100 = p_floor + vec3(0, -1, -1);
    c_100 = clover_noise_3d_offset(c_100, clover_noise_3d_hash(c_100));
    vec3 c_010 = p_floor + vec3(-1, 0, -1);
    c_010 = clover_noise_3d_offset(c_010, clover_noise_3d_hash(c_010));
    vec3 c_110 = p_floor + vec3(0, 0, -1);
    c_110 = clover_noise_3d_offset(c_110, clover_noise_3d_hash(c_110));
    vec3 c_210 = p_floor + vec3(1, 0, -1);
    c_210 = clover_noise_3d_offset(c_210, clover_noise_3d_hash(c_210));
    vec3 c_120 = p_floor + vec3(0, 1, -1);
    c_120 = clover_noise_3d_offset(c_120, clover_noise_3d_hash(c_120));
    vec3 c_001 = p_floor + vec3(-1, -1, 0);
    c_001 = clover_noise_3d_offset(c_001, clover_noise_3d_hash(c_001));
    vec3 c_101 = p_floor + vec3(0, -1, 0);
    c_101 = clover_noise_3d_offset(c_101, clover_noise_3d_hash(c_101));
    vec3 c_201 = p_floor + vec3(1, -1, 0);
    c_201 = clover_noise_3d_offset(c_201, clover_noise_3d_hash(c_201));
    vec3 c_011 = p_floor + vec3(-1, 0, 0);
    c_011 = clover_noise_3d_offset(c_011, clover_noise_3d_hash(c_011));
    vec3 c_211 = p_floor + vec3(1, 0, 0);
    c_211 = clover_noise_3d_offset(c_211, clover_noise_3d_hash(c_211));
    vec3 c_021 = p_floor + vec3(-1, 1, 0);
    c_021 = clover_noise_3d_offset(c_021, clover_noise_3d_hash(c_021));
    vec3 c_121 = p_floor + vec3(0, 1, 0);
    c_121 = clover_noise_3d_offset(c_121, clover_noise_3d_hash(c_121));
    vec3 c_221 = p_floor + vec3(1, 1, 0);
    c_221 = clover_noise_3d_offset(c_221, clover_noise_3d_hash(c_221));
    vec3 c_102 = p_floor + vec3(0, -1, 1);
    c_102 = clover_noise_3d_offset(c_102, clover_noise_3d_hash(c_102));
    vec3 c_012 = p_floor + vec3(-1, 0, 1);
    c_012 = clover_noise_3d_offset(c_012, clover_noise_3d_hash(c_012));
    vec3 c_112 = p_floor + vec3(0, 0, 1);
    c_112 = clover_noise_3d_offset(c_112, clover_noise_3d_hash(c_112));
    vec3 c_212 = p_floor + vec3(1, 0, 1);
    c_212 = clover_noise_3d_offset(c_212, clover_noise_3d_hash(c_212));
    vec3 c_122 = p_floor + vec3(0, 1, 1);
    c_122 = clover_noise_3d_offset(c_122, clover_noise_3d_hash(c_122));

    bool x_bound = clover_noise_3d_boundary(p.yzx, c_100.yzx, c_110.yzx, c_120.yzx, c_101.yzx, c_111.yzx, c_121.yzx, c_102.yzx, c_112.yzx, c_122.yzx);
    bool y_bound = clover_noise_3d_boundary(p.xzy, c_010.xzy, c_110.xzy, c_210.xzy, c_011.xzy, c_111.xzy, c_211.xzy, c_012.xzy, c_112.xzy, c_212.xzy);
    bool z_bound = clover_noise_3d_boundary(    p,     c_001,     c_101,     c_201,     c_011,     c_111,     c_211,     c_021,     c_121,     c_221);

    vec3 a, b, c, d, e, f, g, h;

    if (x_bound) {
        if (y_bound) {
            if (z_bound) {
                a = p_floor + vec3(-1, -1, -1);
                b = c_001;
                c = c_010;
                d = c_011;
                e = c_100;
                f = c_101;
                g = c_110;
                h = c_111;

                a = clover_noise_3d_offset(a, clover_noise_3d_hash(a));
            } else {
                a = c_001;
                b = p_floor + vec3(-1, -1, 1);
                c = c_011;
                d = c_012;
                e = c_101;
                f = c_102;
                g = c_111;
                h = c_112;

                b = clover_noise_3d_offset(b, clover_noise_3d_hash(b));
            }
        } else {
            if (z_bound) {
                a = c_010;
                b = c_011;
                c = p_floor + vec3(-1, 1, -1);
                d = c_021;
                e = c_110;
                f = c_111;
                g = c_120;
                h = c_121;

                c = clover_noise_3d_offset(c, clover_noise_3d_hash(c));
            } else {
                a = c_011;
                b = c_012;
                c = c_021;
                d = p_floor + vec3(-1, 1, 1);
                e = c_111;
                f = c_112;
                g = c_121;
                h = c_122;

                d = clover_noise_3d_offset(d, clover_noise_3d_hash(d));
            }
        }
    } else {
        if (y_bound) {
            if (z_bound) {
                a = c_100;
                b = c_101;
                c = c_110;
                d = c_111;
                e = p_floor + vec3(1, -1, -1);
                f = c_201;
                g = c_210;
                h = c_211;

                e = clover_noise_3d_offset(e, clover_noise_3d_hash(e));
            } else {
                a = c_101;
                b = c_102;
                c = c_111;
                d = c_112;
                e = c_201;
                f = p_floor + vec3(1, -1, 1);
                g = c_211;
                h = c_212;

                f = clover_noise_3d_offset(f, clover_noise_3d_hash(f));
            }
        } else {
            if (z_bound) {
                a = c_110;
                b = c_111;
                c = c_120;
                d = c_121;
                e = c_210;
                f = c_211;
                g = p_floor + vec3(1, 1, -1);
                h = c_221;

                g = clover_noise_3d_offset(g, clover_noise_3d_hash(g));
            } else {
                a = c_111;
                b = c_112;
                c = c_121;
                d = c_122;
                e = c_211;
                f = c_212;
                g = c_221;
                h = p_floor + vec3(1, 1, 1);

                h = clover_noise_3d_offset(h, clover_noise_3d_hash(h));
            }
        }
    }

    vec3 ah = a - h;
    vec3 pa = p - a;
    
    vec3 plane_b_sum = cross(ah, b - h) * pa;
    float plane_b = plane_b_sum.x + plane_b_sum.y + plane_b_sum.z;
    vec3 plane_c_sum = cross(ah, c - h) * pa;
    float plane_c = plane_c_sum.x + plane_c_sum.y + plane_c_sum.z;
    vec3 plane_d_sum = cross(ah, d - h) * pa;
    float plane_d = plane_d_sum.x + plane_d_sum.y + plane_d_sum.z;
    vec3 plane_e_sum = cross(ah, e - h) * pa;
    float plane_e = plane_e_sum.x + plane_e_sum.y + plane_e_sum.z;
    vec3 plane_f_sum = cross(ah, f - h) * pa;
    float plane_f = plane_f_sum.x + plane_f_sum.y + plane_f_sum.z;
    vec3 plane_g_sum = cross(ah, g - h) * pa;
    float plane_g = plane_g_sum.x + plane_g_sum.y + plane_g_sum.z;

    vec3 i, j, k, l;
    i = a;
    j = h;

    if (plane_b > 0. && plane_d <= 0.) {
        k = b;
        l = d;
    } else if (plane_d > 0. && plane_c <= 0.) {
        k = d;
        l = c;
    } else if (plane_c > 0. && plane_g <= 0.) {
        k = c;
        l = g;
    } else if (plane_g > 0. && plane_e <= 0.) {
        k = g;
        l = e;
    } else if (plane_e > 0. && plane_f <= 0.) {
        k = e;
        l = f;
    } else {
        k = f;
        l = b;
    }

    vec3 bc_ap = p - i;
    vec3 bc_bp = p - j;

    vec3 bc_ab = j - i;
    vec3 bc_ac = k - i;
    vec3 bc_ad = l - i;

    vec3 bc_bc = k - j;
    vec3 bc_bd = l - j;

    float bc_va6 = dot(bc_bp, cross(bc_bd, bc_bc));
    float bc_vb6 = dot(bc_ap, cross(bc_ac, bc_ad));
    float bc_vc6 = dot(bc_ap, cross(bc_ad, bc_ab));
    float bc_vd6 = dot(bc_ap, cross(bc_ab, bc_ac));
    float bc_v6 = 1. / dot(bc_ab, cross(bc_ac, bc_ad));

    float v = bc_va6 * bc_v6;
    float w = bc_vb6 * bc_v6;
    float t = bc_vc6 * bc_v6;
    float u = bc_vd6 * bc_v6;
    
    float fiu = u * u * u * (1. - v * w * t);
    float fiv = v * v * v * (1. - u * w * t);
    float fiw = w * w * w * (1. - v * u * t);
    float fit = t * t * t * (1. - v * w * u);
    float s = fiu + fiv + fiw + fit;
    fiu /= s;
    fiv /= s;
    fiw /= s;
    fit /= s;

    float iv = clover_noise_3d_hash(i);
    float jv = clover_noise_3d_hash(j);
    float kv = clover_noise_3d_hash(k);
    float lv = clover_noise_3d_hash(l);
    
    return fiv * iv + fiw * jv + fit * kv + fiu * lv;
}



float fractal_clover_noise_3d(vec3 p, int iterations) {
    float total = 0.;
    float divide = 0.;

    float scale = 1.;
    float invScale = 1.;

    for (int iter = 0; iter < 10; iter++) {
        if (iter >= iterations) {
            break;
        }
        
        total += clover_noise_3d(p * invScale) * scale;
        divide += scale;
        
        scale *= .4;
        invScale *= 2.5;
    }

    return total / divide;
}

vec3 curl_clover_noise_3d(vec3 p) {
    const float DX = 0.01;

    float v = clover_noise_3d(p);
    float x = clover_noise_3d(p + vec3(DX, 0., 0.));
    float y = clover_noise_3d(p + vec3(0., DX, 0.));
    float z = clover_noise_3d(p + vec3(0., 0., DX));
    return normalize(vec3(v - x, v - y, v - x));
}


vec3 curl_fractal_clover_noise_3d(vec3 p, int iterations) {
    const float DX = 0.01;

    float v = fractal_clover_noise_3d(p, iterations);
    float x = fractal_clover_noise_3d(p + vec3(DX, 0., 0.), iterations);
    float y = fractal_clover_noise_3d(p + vec3(0., DX, 0.), iterations);
    float z = fractal_clover_noise_3d(p + vec3(0., 0., DX), iterations);
    return normalize(vec3(v - x, v - y, v - z));
}



// https://gist.github.com/patriciogonzalezvivo/670c22f3966e662d2f83
//	Classic Perlin 3D Noise 
//	by Stefan Gustavson
//
//vec4 permute(vec4 x){return mod(((x*34.0)+1.0)*x, 289.0);}
//vec4 taylorInvSqrt(vec4 r){return 1.79284291400159 - 0.85373472095314 * r;}
vec4 fade(vec4 t) {return t*t*t*(t*(t*6.0-15.0)+10.0);}

float snoise(vec3 v){
  const vec2  C = vec2(1.0/6.0, 1.0/3.0) ;
  const vec4  D = vec4(0.0, 0.5, 1.0, 2.0);

// First corner
  vec3 i  = floor(v + dot(v, C.yyy) );
  vec3 x0 =   v - i + dot(i, C.xxx) ;

// Other corners
  vec3 g = step(x0.yzx, x0.xyz);
  vec3 l = 1.0 - g;
  vec3 i1 = min( g.xyz, l.zxy );
  vec3 i2 = max( g.xyz, l.zxy );

  //   x0 = x0 - 0.0 + 0.0 * C.xxx;
  //   x1 = x0 - i1  + 1.0 * C.xxx;
  //   x2 = x0 - i2  + 2.0 * C.xxx;
  //   x3 = x0 - 1.0 + 3.0 * C.xxx;
  vec3 x1 = x0 - i1 + C.xxx;
  vec3 x2 = x0 - i2 + C.yyy; // 2.0*C.x = 1/3 = C.y
  vec3 x3 = x0 - D.yyy;      // -1.0+3.0*C.x = -0.5 = -D.y
  
// Permutations
  i = mod289(i);
  vec4 p = permute( permute( permute(
             i.z + vec4(0.0, i1.z, i2.z, 1.0 ))
           + i.y + vec4(0.0, i1.y, i2.y, 1.0 ))
           + i.x + vec4(0.0, i1.x, i2.x, 1.0 ));

// Gradients: 7x7 points over a square, mapped onto an octahedron.
// The ring size 17*17 = 289 is close to a multiple of 49 (49*6 = 294)
  float n_ = 0.142857142857; // 1.0/7.0
  vec3  ns = n_ * D.wyz - D.xzx;

  vec4 j = p - 49.0 * floor(p * ns.z * ns.z);  //  mod(p,7*7)

  vec4 x_ = floor(j * ns.z);
  vec4 y_ = floor(j - 7.0 * x_ );    // mod(j,N)

  vec4 x = x_ *ns.x + ns.yyyy;
  vec4 y = y_ *ns.x + ns.yyyy;
  vec4 h = 1.0 - abs(x) - abs(y);

  vec4 b0 = vec4( x.xy, y.xy );
  vec4 b1 = vec4( x.zw, y.zw );

  //vec4 s0 = vec4(lessThan(b0,0.0))*2.0 - 1.0;
  //vec4 s1 = vec4(lessThan(b1,0.0))*2.0 - 1.0;
  vec4 s0 = floor(b0)*2.0 + 1.0;
  vec4 s1 = floor(b1)*2.0 + 1.0;
  vec4 sh = -step(h, vec4(0.0));

  vec4 a0 = b0.xzyw + s0.xzyw*sh.xxyy ;
  vec4 a1 = b1.xzyw + s1.xzyw*sh.zzww ;

  vec3 p0 = vec3(a0.xy,h.x);
  vec3 p1 = vec3(a0.zw,h.y);
  vec3 p2 = vec3(a1.xy,h.z);
  vec3 p3 = vec3(a1.zw,h.w);

//Normalise gradients
  vec4 norm = taylorInvSqrt(vec4(dot(p0,p0), dot(p1,p1), dot(p2, p2), dot(p3,p3)));
  p0 *= norm.x;
  p1 *= norm.y;
  p2 *= norm.z;
  p3 *= norm.w;

// Mix final noise value
  vec4 m = max(0.6 - vec4(dot(x0,x0), dot(x1,x1), dot(x2,x2), dot(x3,x3)), 0.0);
  m = m * m;
  return 42.0 * dot( m*m, vec4( dot(p0,x0), dot(p1,x1),
                                dot(p2,x2), dot(p3,x3) ) );
  }


// Worly 3D noise
// Permutation polynomial: (34x^2 + x) mod 289
vec3 permute(vec3 x) {
  vec3 s = vec3(seed);
  x += s;
  return mod((34.0 * x + 1.0) * x, 289.0);
}

vec3 dist(vec3 x, vec3 y, vec3 z,  bool manhattanDistance) {
  return manhattanDistance ?  abs(x) + abs(y) + abs(z) :  (x * x + y * y + z * z);
}

vec2 worley(vec3 P, float jitter, bool manhattanDistance) {
    float K = 0.142857142857; // 1/7
    float Ko = 0.428571428571; // 1/2-K/2
    float  K2 = 0.020408163265306; // 1/(7*7)
    float Kz = 0.166666666667; // 1/6
    float Kzo = 0.416666666667; // 1/2-1/6*2

	vec3 Pi = mod(floor(P), 289.0);
 	vec3 Pf = fract(P) - 0.5;

	vec3 Pfx = Pf.x + vec3(1.0, 0.0, -1.0);
	vec3 Pfy = Pf.y + vec3(1.0, 0.0, -1.0);
	vec3 Pfz = Pf.z + vec3(1.0, 0.0, -1.0);

	vec3 p = permute(Pi.x + vec3(-1.0, 0.0, 1.0));
	vec3 p1 = permute(p + Pi.y - 1.0);
	vec3 p2 = permute(p + Pi.y);
	vec3 p3 = permute(p + Pi.y + 1.0);

	vec3 p11 = permute(p1 + Pi.z - 1.0);
	vec3 p12 = permute(p1 + Pi.z);
	vec3 p13 = permute(p1 + Pi.z + 1.0);

	vec3 p21 = permute(p2 + Pi.z - 1.0);
	vec3 p22 = permute(p2 + Pi.z);
	vec3 p23 = permute(p2 + Pi.z + 1.0);

	vec3 p31 = permute(p3 + Pi.z - 1.0);
	vec3 p32 = permute(p3 + Pi.z);
	vec3 p33 = permute(p3 + Pi.z + 1.0);

	vec3 ox11 = fract(p11*K) - Ko;
	vec3 oy11 = mod(floor(p11*K), 7.0)*K - Ko;
	vec3 oz11 = floor(p11*K2)*Kz - Kzo; // p11 < 289 guaranteed

	vec3 ox12 = fract(p12*K) - Ko;
	vec3 oy12 = mod(floor(p12*K), 7.0)*K - Ko;
	vec3 oz12 = floor(p12*K2)*Kz - Kzo;

	vec3 ox13 = fract(p13*K) - Ko;
	vec3 oy13 = mod(floor(p13*K), 7.0)*K - Ko;
	vec3 oz13 = floor(p13*K2)*Kz - Kzo;

	vec3 ox21 = fract(p21*K) - Ko;
	vec3 oy21 = mod(floor(p21*K), 7.0)*K - Ko;
	vec3 oz21 = floor(p21*K2)*Kz - Kzo;

	vec3 ox22 = fract(p22*K) - Ko;
	vec3 oy22 = mod(floor(p22*K), 7.0)*K - Ko;
	vec3 oz22 = floor(p22*K2)*Kz - Kzo;

	vec3 ox23 = fract(p23*K) - Ko;
	vec3 oy23 = mod(floor(p23*K), 7.0)*K - Ko;
	vec3 oz23 = floor(p23*K2)*Kz - Kzo;

	vec3 ox31 = fract(p31*K) - Ko;
	vec3 oy31 = mod(floor(p31*K), 7.0)*K - Ko;
	vec3 oz31 = floor(p31*K2)*Kz - Kzo;

	vec3 ox32 = fract(p32*K) - Ko;
	vec3 oy32 = mod(floor(p32*K), 7.0)*K - Ko;
	vec3 oz32 = floor(p32*K2)*Kz - Kzo;

	vec3 ox33 = fract(p33*K) - Ko;
	vec3 oy33 = mod(floor(p33*K), 7.0)*K - Ko;
	vec3 oz33 = floor(p33*K2)*Kz - Kzo;

	vec3 dx11 = Pfx + jitter*ox11;
	vec3 dy11 = Pfy.x + jitter*oy11;
	vec3 dz11 = Pfz.x + jitter*oz11;

	vec3 dx12 = Pfx + jitter*ox12;
	vec3 dy12 = Pfy.x + jitter*oy12;
	vec3 dz12 = Pfz.y + jitter*oz12;

	vec3 dx13 = Pfx + jitter*ox13;
	vec3 dy13 = Pfy.x + jitter*oy13;
	vec3 dz13 = Pfz.z + jitter*oz13;

	vec3 dx21 = Pfx + jitter*ox21;
	vec3 dy21 = Pfy.y + jitter*oy21;
	vec3 dz21 = Pfz.x + jitter*oz21;

	vec3 dx22 = Pfx + jitter*ox22;
	vec3 dy22 = Pfy.y + jitter*oy22;
	vec3 dz22 = Pfz.y + jitter*oz22;

	vec3 dx23 = Pfx + jitter*ox23;
	vec3 dy23 = Pfy.y + jitter*oy23;
	vec3 dz23 = Pfz.z + jitter*oz23;

	vec3 dx31 = Pfx + jitter*ox31;
	vec3 dy31 = Pfy.z + jitter*oy31;
	vec3 dz31 = Pfz.x + jitter*oz31;

	vec3 dx32 = Pfx + jitter*ox32;
	vec3 dy32 = Pfy.z + jitter*oy32;
	vec3 dz32 = Pfz.y + jitter*oz32;

	vec3 dx33 = Pfx + jitter*ox33;
	vec3 dy33 = Pfy.z + jitter*oy33;
	vec3 dz33 = Pfz.z + jitter*oz33;

	vec3 d11 = dist(dx11, dy11, dz11, manhattanDistance);
	vec3 d12 =dist(dx12, dy12, dz12, manhattanDistance);
	vec3 d13 = dist(dx13, dy13, dz13, manhattanDistance);
	vec3 d21 = dist(dx21, dy21, dz21, manhattanDistance);
	vec3 d22 = dist(dx22, dy22, dz22, manhattanDistance);
	vec3 d23 = dist(dx23, dy23, dz23, manhattanDistance);
	vec3 d31 = dist(dx31, dy31, dz31, manhattanDistance);
	vec3 d32 = dist(dx32, dy32, dz32, manhattanDistance);
	vec3 d33 = dist(dx33, dy33, dz33, manhattanDistance);

	vec3 d1a = min(d11, d12);
	d12 = max(d11, d12);
	d11 = min(d1a, d13); // Smallest now not in d12 or d13
	d13 = max(d1a, d13);
	d12 = min(d12, d13); // 2nd smallest now not in d13
	vec3 d2a = min(d21, d22);
	d22 = max(d21, d22);
	d21 = min(d2a, d23); // Smallest now not in d22 or d23
	d23 = max(d2a, d23);
	d22 = min(d22, d23); // 2nd smallest now not in d23
	vec3 d3a = min(d31, d32);
	d32 = max(d31, d32);
	d31 = min(d3a, d33); // Smallest now not in d32 or d33
	d33 = max(d3a, d33);
	d32 = min(d32, d33); // 2nd smallest now not in d33
	vec3 da = min(d11, d21);
	d21 = max(d11, d21);
	d11 = min(da, d31); // Smallest now in d11
	d31 = max(da, d31); // 2nd smallest now not in d31
	d11.xy = (d11.x < d11.y) ? d11.xy : d11.yx;
	d11.xz = (d11.x < d11.z) ? d11.xz : d11.zx; // d11.x now smallest
	d12 = min(d12, d21); // 2nd smallest now not in d21
	d12 = min(d12, d22); // nor in d22
	d12 = min(d12, d31); // nor in d31
	d12 = min(d12, d32); // nor in d32
	d11.yz = min(d11.yz,d12.xy); // nor in d12.yz
	d11.y = min(d11.y,d12.z); // Only two more to go
	d11.y = min(d11.y,d11.z); // Done! (Phew!)
	return sqrt(d11.xy); // F1, F2

}


//////////////////////////////// End noise code ////////////////////////////////

// https://github.com/tuxalin/procedural-tileable-shaders


float mapNoise(vec3 v) {
    vec3 offset = vec3(xoffset,yoffset,0);
    float t = 0.0;
    v += offset;
	float _freq = 1.0 * (1.0/freq);
    float amp = amplitude;
	float _lacunarity = lacunarity/10.0;
    float maxAmp = 0.0;
    for(int i = 0; i < int(octaves); i++) {
	    if(i == 0) { 
            if(int(noiseType) == 0) {
                t +=snoise(v*_freq) * amp;      
            } else if(int(noiseType) == 1) {
                vec2 n =  worley(v*_freq*2., jitter, false);
                t += (n.y - n.x) * amp - 0.25;
            } else if(int(noiseType) == 2) {
                t +=clover_noise_3d(v*_freq)  * amp - 0.5;      
            }
	    } else {
            if(int(octaveNoiseType) == 0) {
                t += snoise(v*_freq) * amp;
            } else if(int(octaveNoiseType) == 1) {
                vec2 n =  worley(v*_freq, jitter, false);
		        t += (n.y - n.x) * amp - 0.25;
            } else if(int(noiseType) == 2) {
                t +=clover_noise_3d(v*_freq)  * amp - 0.5;      
            }
	    }
		_freq += _lacunarity;
        amp *= gain;
		maxAmp += amp;
    }
	

    float a = -1.;
    float b = 1.;
   
    if(int(noiseType) > 0) {
         a = -2.0;
   }
	
   //t = t * 0.5 + 0.5;

	int c = int(floor(startcolor));
	int d = int(floor(endcolor));
	float newT = (t-a)/(b-a) * float((d-c) + c);
    //newT /= maxAmp; //  shift
  // newT = smoothstep(waterthreshcolor,endcolor,newT);
   return newT;
}


float map( vec3 v ) {

    float idx = mapNoise(v);
    const float PI = 3.1415926;
    vec3 center = iVolumeSize * 0.5;

   // float radius = min( min( center.x, center.y ), center.z ) - reliefheight;
    float radius = min( min( center.x, center.y ), center.z );

    
    float reliefSteps = abs((256.0 - waterthreshcolor) / reliefheight);
    float innerRadius = radius - reliefheight/2.;
    float outerRadius =  radius + reliefheight/2.;

    float distance = length( v + 0.5 - center );
    float myStep = (idx - waterthreshcolor) / reliefSteps;
    float distStep = (distance - innerRadius) / reliefSteps;
    float thisThresh = waterthreshcolor + myStep;

    /*
    if(removecolor < 0) {
        if(int(idx) != int(abs(removecolor))) {
        	return 0.0;
        }
    } else if(removecolor > 0) {
        if(int(idx) == int(abs(removecolor))) {
        	    return 0.0;
        }
    }
    */

    if(distance > outerRadius) {
     return -1.0;
    }

    if(cutoff < 0.) {
        if(idx < cutoff*-1.0) {
            return -1.0;
        }
    }
    if(cutoff > 0.) {
        if(idx > cutoff) {
            return -1.0;
        }
    }

    if(reliefheight != 0.) {
        //  if we are above innerRadius, but below outerRadius, use a step-based function
        //  to determine if a color should be displayed.
        if((distance >= innerRadius) && (distance <= outerRadius)) {
            
            if(idx > thisThresh) {
                return idx;
            } else {
                return -1.;
            }

        }
    }




    if(distance > outerRadius) {
        return -1.0;
    } else {
       if(distance < innerRadius ) { 
          return idx;
       }
   }
}


